1.A

Funcion BusquedaLineal(int arreglo[], int n, int V){
	
	int a,b;
	int match=0;
	//V=key
	//n = numero de elementos arreglo
	//se recorre arreglo
	for (a=0; a<n; a++){
		for (b=0; b<n; b++){
			//condicion para no sumar mismo elemento en arreglo
			if (a==b)
				//continua a siguiente ciclo
				continue;
			if (arreglo[a]+arreglo[b]==V) // a+b=V
				//valor match aumenta si existe suma con resultado pedido entre elementos !=
				match += match;
		}
	}
	//se evita que pares se cuenten dos veces
	//a+b y b+a corresponden a misma suma
	match = match/2;
}

1.B


// n = total elementos
// V = Key
// menor = indice menor en arreglo
// mayor = indicem mayor en arreglo


Busqueda(arreglo[], n, V, menor, mayor){
	ciclo (a=0; a<n; a++){
		b = V - arreglo[a]
		resultado_arreglo = BusquedaBinaria(arr, b, menor, mayor)
		si (resultado_arreglo != vacio)
			match = true;
			//opcion de recorrer resultado_arreglo especificando indices de elementos...
	}
}

//se inicia vector de tamaÃ±o dinamico que contiene indices de elementos tipo 'b', tal que a + b= V
//caso lenguaje c++, uso vector
vector <Arreglo> arr
BusquedaBinaria(arr, x, menor, mayor)
        repetir hasta menor = mayor
               med = (menor + mayor)/2
                   si (x == arr[med])
                   	arr.agregar(arr[med])
                   	
                   ademas si (x > arr[med]) // x esta al lado derecho
                       menor = med + 1
   
                   sino                  // x esta al lado izquierdo
                       mayor = med - 1
	}
	return arr
}











